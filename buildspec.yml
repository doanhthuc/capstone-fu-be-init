version: 0.2

phases:
  install:
    commands:
      # - echo Installing AWS CLI...
      # - pip install --upgrade pip
      # - pip install --upgrade awscli
      - echo Installing AWS EKS CLI...
      - curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.11/2023-03-17/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      # - export AWS_ACCESS_KEY_ID=""
      # - export AWS_SECRET_ACCESS_KEY=""
      # - export AWS_DEFAULT_REGION="ap-southeast-1"
      - export KUBECONFIG=$HOME/.kube/config
      - echo Installing successful...
  pre_build:
    commands:
      - echo Connecting to Amazon ECR...
      - aws --version
      # - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 975719059066.dkr.ecr.ap-southeast-1.amazonaws.com
      - REPOSITORY_URI=975719059066.dkr.ecr.ap-southeast-1.amazonaws.com/product-service
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      # - IMAGE_NAME=product-service
      # - echo Build started on `date`
      # - echo cd into the product directory...
      # - cd ./product
      # - echo Building the Docker image...
      # - docker build -t $REPOSITORY_URI:latest .
      # - docker build -t product-service .
      - echo Tagging the Docker image...
      # - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      # - echo Build completed on `date`
      # - echo Pushing the Docker images...
      # - docker push $REPOSITORY_URI:latest
      # - docker push $REPOSITORY_URI:$IMAGE_TAG
      # - echo Writing image definitions file...
      # - printf '[{"name":"product-service","imageUri":"%s"}]'
      #   $REPOSITORY_URI:$IMAGE_TAG > image-definitions.json
      # - cat image-definitions.json
      # - echo Logging into Amazon EKS...
      # - aws eks update-kubeconfig --region ap-southeast-1 --name eks-capstone-cluster
      # - echo Login into Kubernetes successfully
      # - kubectl apply -f mongo-pvc-pv.yaml
      # - kubectl apply -f mongo-deployment.yaml
      # - kubectl apply -f service-deployment.yaml
      # - cd ../
      # - kubectl apply -f ingress.yaml
      - export EKS_KUBECTL_ROLE_ARN=arn:aws:iam::975719059066:role/eks-admin-for-product-code-build-service-role
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --region ap-southeast-1 --name eks-capstone-cluster
      - echo Login into Kubernetes successfully
      # - kubectl run nginx --image=nginx
      - echo Applying service to Kubernetes successfully
artifacts:
  files: image-definitions.json